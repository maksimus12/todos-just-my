{"version":3,"sources":["NewMember.js","Member.js","Members.js","App.js","serviceWorker.js","index.js"],"names":["NewMember","state","person","handleChange","e","setState","target","value","console","log","handleSubmit","preventDefault","trim","length","props","newPerson","className","onSubmit","this","type","placeholder","onChange","Component","Member","id","deleting","onClick","Members","memberMap","deleteMember","map","member","key","App","members","setMember","Math","random","filtredState","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0MA2CeA,E,4MAxCdC,MAAQ,CACPC,OAAS,I,EAGVC,aAAe,SAACC,GACf,EAAKC,SAAS,CACbH,OAASE,EAAEE,OAAOC,QAEnBC,QAAQC,IAAI,EAAKR,MAAMC,S,EAGxBQ,aAAe,SAACN,GACfA,EAAEO,iBAEqC,GAAnC,EAAKV,MAAMC,OAAOU,OAAOC,SAC5B,EAAKC,MAAMC,UAAU,EAAKd,MAAMC,QAChC,EAAKG,SAAS,CACbH,OAAS,MAGXM,QAAQC,IAAI,EAAKR,MAAO,EAAKa,Q,uDAI7B,OACC,yBAAKE,UAAU,mBACd,0BAAMC,SAAUC,KAAKR,cACpB,2BACCS,KAAK,OACLZ,MAAOW,KAAKjB,MAAMC,OAClBkB,YAAY,oBACZC,SAAUH,KAAKf,eAEhB,kD,GAlCmBmB,aCUTC,EAVO,SAAC,GAA8B,IAA5BrB,EAA2B,EAA3BA,OAAQsB,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SACpC,OACC,yBAAKT,UAAU,iBACd,yBAAKA,UAAU,aACd,wBAAIU,QAAS,kBAAMD,EAASD,KAAMtB,MCMvByB,EAVQ,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACpC,OACC,6BACED,EAAUE,KAAI,SAACC,GAAD,OACd,kBAAC,EAAD,CAAQ7B,OAAQ6B,EAAOA,OAAQC,IAAKD,EAAOP,GAAIA,GAAIO,EAAOP,GAAIC,SAAUI,SC6B7DI,E,4MA9BdhC,MAAQ,CACPiC,QAAU,CAAE,CAAEV,GAAI,EAAGO,OAAQ,U,EAG9BhB,UAAY,SAACgB,GACZvB,QAAQC,IAAI,EAAKR,MAAMiC,QAAQH,QAC/B,IAAMI,EAAS,sBAAQ,EAAKlC,MAAMiC,SAAnB,CAA4B,CAAEV,GAAIY,KAAKC,SAAUN,YAChE,EAAK1B,SAAS,CACb6B,QAAUC,K,EAIZN,aAAe,SAACL,GACf,IAAMc,EAAe,EAAKrC,MAAMiC,QAAQK,QAAO,SAACR,GAAD,OAAYA,EAAOP,KAAOA,KACzE,EAAKnB,SAAS,CACb6B,QAAUI,K,uDAKX,OACC,6BACC,uCACA,kBAAC,EAAD,CAASV,UAAWV,KAAKjB,MAAMiC,QAASL,aAAcX,KAAKW,eAC3D,kBAAC,EAAD,CAAWd,UAAWG,KAAKH,iB,GAzBbO,aCQEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.014dc1e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NewMember extends Component {\n\tstate = {\n\t\tperson : ''\n\t};\n\n\thandleChange = (e) => {\n\t\tthis.setState({\n\t\t\tperson : e.target.value\n\t\t});\n\t\tconsole.log(this.state.person);\n\t};\n\n\thandleSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\tif (this.state.person.trim().length != 0) {\n\t\t\tthis.props.newPerson(this.state.person);\n\t\t\tthis.setState({\n\t\t\t\tperson : ''\n\t\t\t});\n\t\t}\n\t\tconsole.log(this.state, this.props);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\" inputContainer\">\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={this.state.person}\n\t\t\t\t\t\tplaceholder=\"here is your todo\"\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<button>New Todo</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default NewMember;\n","import React from 'react';\n\nexport const Member = ({ person, id, deleting }) => {\n\treturn (\n\t\t<div className=\"top-container\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<h3 onClick={() => deleting(id)}>{person}</h3>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Member;\n","import React from 'react';\nimport Member from './Member';\nexport const Members = ({ memberMap, deleteMember }) => {\n\treturn (\n\t\t<div>\n\t\t\t{memberMap.map((member) => (\n\t\t\t\t<Member person={member.member} key={member.id} id={member.id} deleting={deleteMember} />\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default Members;\n","import React, { Component } from 'react';\nimport NewMember from './NewMember';\nimport Members from './Members';\n\nclass App extends Component {\n\tstate = {\n\t\tmembers : [ { id: 1, member: 'milk' } ]\n\t};\n\n\tnewPerson = (member) => {\n\t\tconsole.log(this.state.members.member);\n\t\tconst setMember = [ ...this.state.members, { id: Math.random(), member } ];\n\t\tthis.setState({\n\t\t\tmembers : setMember\n\t\t});\n\t};\n\n\tdeleteMember = (id) => {\n\t\tconst filtredState = this.state.members.filter((member) => member.id !== id);\n\t\tthis.setState({\n\t\t\tmembers : filtredState\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>MY Todo</h1>\n\t\t\t\t<Members memberMap={this.state.members} deleteMember={this.deleteMember} />\n\t\t\t\t<NewMember newPerson={this.newPerson} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}